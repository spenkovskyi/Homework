"""–ó–∞–¥–∞–Ω–∏–µ 1 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤)
–ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º (–∞ —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º) –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
1) Person (–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞:
1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π, –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç
(–æ–¥–Ω–æ –ø–æ–ª–µ ‚Äì –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞ –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª),
2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
1.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
2.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
3.	–≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (obj.age(years));
–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞,
—Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ 2018, –Ω–æ –±–æ–ª—å—à–µ 1900,
–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
2) Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
1.	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç, Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç,
Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç. –¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>. –ï—Å–ª–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —É
–≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å programmer —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
2.	–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
3) ITEmployee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Employee)
1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skill (—Å–º. –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).
2. * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skills.
–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω –∏ –æ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞—Å—à–∏—Ä—è–µ—Ç–µ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill, –∏–ª–∏
–≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—Å–µ –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill
"""


class Person:
    def __init__(self, full_name="Vasya Pupikov", year_of_birth=1985):
        if len(full_name.split()) != 2:
            raise Exception("Full name must consist of 2 words")
        if year_of_birth not in range (1900,2018):
            raise Exception("Year of birth must be in range 1900 - 2018")
        self.full_name = full_name
        self.year_of_birth = year_of_birth
    def name_from_full_name(self):
        name = self.full_name.split()[0]
        return name
    def surname_from_full_name(self):
        surname = self.full_name.split()[1]
        return surname
    def age(self, current_year=2018):
        age = current_year - self.year_of_birth
        return age


class Employee(Person):
    def __init__(self, *args, position="no position", experience=1, salary=1000,**kwargs):
        super(Employee, self).__init__(*args,**kwargs)
        self.position = position
        self.position = position
        self.experience = experience
        self.salary = salary
    def current_position(self):
        if self.experience in range (0,3):
            current_position = "Junior " + self.position
        elif self.experience in range (3,6):
            current_position = "Middle " + self.position
        elif self.experience in range (6,80):
            current_position = "Senior " + self.position
        else:
            raise Exception("Expirience is out of range")
        return current_position
    def salary_upgrade(self, upgrade=200):
        self.salary = self.salary + upgrade
        return self.salary


class ITEmployee(Employee):
    def __init__(self, *args, skills=list(),**kwargs):
        super(ITEmployee, self).__init__(*args,**kwargs)
        self.skills = skills

    def add_skill(self, new_skill):
        self.skills.append(new_skill)
        return self.skills
    def add_skills(self, new_skills=list()):
        self.skills = self.skills + new_skills
        return self.skills

if __name__ == "__main__":
    person = Person(full_name="Vaselina Pupkova", year_of_birth=2000)
    # person = Person(full_name="VaselinaPupkova", year_of_birth=2000)
    # person = Person(full_name="Vaselina Pupkova", year_of_birth=1000)
    print(person.name_from_full_name())
    print(person.surname_from_full_name())
    print("Age is", person.age(2015))
    
    empl1 = Employee()
    print(empl1.full_name, empl1.year_of_birth, empl1.experience, empl1.position, empl1.salary)
    
    empl2 = Employee(full_name="Vasek Pupov", year_of_birth=1999, position="QA engineer", experience=3, salary=1500)
    print(empl2.full_name, empl2.year_of_birth, empl2.experience, empl2.position, empl2.salary)
    print("Age is", empl2.age())
    print("Current position is", empl2.current_position())
    print("Salary of",empl2.name_from_full_name(),"after upgrade is", empl2.salary_upgrade(250))
    
    itempl1=ITEmployee()
    print(itempl1.full_name, itempl1.year_of_birth, itempl1.experience, itempl1.position, itempl1.salary, itempl1.skills)

    itempl2=ITEmployee(full_name="Vasisualy Pupichkov", year_of_birth=1990, position="HW engineer", experience=12, salary=4500, skills=["Logic","Python","Manual QA","Hardware"])
    print(itempl2.full_name, itempl2.year_of_birth, itempl2.experience, itempl2.position, itempl2.salary,itempl2.skills)
    print("Age is", itempl2.age())
    print("Current position is", itempl2.current_position())
    print("Salary of",itempl2.name_from_full_name(),"after upgrade is", itempl2.salary_upgrade(500))
    itempl2.add_skill("Automation")
    print(itempl2.skills)
    itempl2.add_skills(["Management", "Patience", "Work for free"])
    print(itempl2.skills)
